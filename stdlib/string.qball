$ String standards

global ascii_letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
global ascii_lower = "abcdefghijklmnopqrstuvwxyz";
global ascii_upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
global digits = "0123456789";
global punctuation = "!\\\"#$%&\\\'()*+,-./:;<=>?@[\]^_`{|}~";
global hex = "0123456789abcdefABCDEF";
global oct = "01234567";
global outable = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&'()*+,-./:;<=>?@[\]^_`{|}~ 	";
global whitespace = " \t";

_upper stringarg ret;
  if !stringarg;
    raise "Upper requires 1+ characters"
  end
  local a = 0;
  local retval = "";
  for i in stringarg;
    if i in ascii_upper | i in whitespace | i in punctuation;
      retval[a] = i;
    else;
      local c = 0;
      for e in ascii_lower;
        if i == e;
          break;
        end
        c = math c + 1;;
      end
      retval[a] = ascii_upper[c];
    end
    a = math a + 1;;
  end
  return ret retval;
end

_lower stringarg ret;
  if !stringarg;
    raise "Lower requires 1+ characters"
  end
  local a = 0;
  local retval = "";
  for i in stringarg;
    if i in ascii_lower | i in whitespace | i in punctuation;
      retval[a] = i;
    else;
      local c = 0;
      for e in ascii_upper;
        if i == e;
          break;
        end
        c = math c + 1;;
      end
      retval[a] = ascii_lower[c];
    end
    a = math a + 1;;
  end
  return ret retval;
end

_find stringarg ret;
  if !stringarg;
    raise "Find requires 1+ characters"
  end
  pass;
end

_isnumeric a ret;
  if !a;
    raise "Isnumeric requires 1+ characters"
  end
  $ If a is a number, return True to ret
  local floatcount = 0;
  local isnum = 1;
  for i in a;
    if i in digits | i in "-#.";
      if i == ".";
        floatcount = math floatcount + 1;;
      end
    else;
      isnum = 0;
      break;
    end
    if floatcount < 1;
      isnum = 0;
      break;
    end
  end
  return ret isnum;
end

_islower a ret;
  if !a;
    raise "Islower requires 1+ characters"
  end
  $ If a is all lower, return True to ret
  local islow = 1;
  for i in a;
    if i in ascii_lower | i in punctuation | i in digits | i in whitespace;
      pass;
    else;
      out i;
      islow = 0;
      break;
    end
  end
  return ret islow;
end

_isupper a ret;
  if !a;
    raise "Isupper requires 1+ characters"
  end
  $ If a is all upper, return True to ret
  local isup = 1;
  for i in a;
    if i in ascii_upper | i in punctuation | i in digits | i in whitespace;
      pass;
    else;
      out i;
      isup = 0;
      break;
    end
  end
  return ret isup;
end

_length stringarg ret;
  if !stringarg;
    raise "Length requires 1+ characters"
  end
  local len = 0;
  for i in stringarg;
    len += 1;
  end
  return ret len;
end

_access stringarg num ret;
  if !stringarg;
    raise "Access requires 1+ characters"
  end
  return ret stringarg[num];
end

_join stringarg joiner ret;
  if !stringarg;
    raise "Join requires 1+ characters"
  end
  local a = "";
  local c = 0;
  for i in stringarg;
    a += i;
    a += joiner;
    c += 1;
  end
  return ret a;
end